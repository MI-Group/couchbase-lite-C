name: Build And Test

on:
  push:
    branches:
      - master
      - dev
      - 'release/*'
  pull_request:
    branches:
      - '**'

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug
  ROOTFS: /usr/arm-linux-gnueabihf

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Install Dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          gcc-arm-linux-gnueabihf \
          g++-arm-linux-gnueabihf \
          qemu-user-static \
          build-essential \
          cmake \
          libc6-dev-armhf-cross

    - name: Create Build Environment
      working-directory: ${{ github.workspace }}
      run: cmake -E make_directory ${{ github.workspace }}/build

    - name: Configure CMake for armhf
      if: matrix.os == 'ubuntu-latest'
      working-directory: ${{ github.workspace }}/build
      run: |
        cmake .. \
          -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/cmake/Toolchain-cross-armhf.cmake \
          -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
          -DROOTFS=$ROOTFS \
          -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/build/out

    - name: Configure CMake (Windows)
      if: matrix.os == 'windows-latest'
      working-directory: ${{ github.workspace }}/build
      run: cmake .. -A x64 -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/build/out

    - name: Configure CMake (macOS)
      if: matrix.os == 'macOS-latest'
      working-directory: ${{ github.workspace }}/build
      run: cmake .. -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/build/out

    - name: Build
      working-directory: ${{ github.workspace }}/build
      run: cmake --build . --config ${{ env.BUILD_TYPE }}

    - name: Test
      if: runner.os != 'Windows'
      working-directory: ${{ github.workspace }}
      shell: bash
      run: |
        pushd build/test
        ./CBL_C_Tests -r list
        popd

    - name: Test On Windows
      if: runner.os == 'Windows'
      working-directory: ${{ github.workspace }}
      shell: bash
      run: |
        mkdir -p /c/tmp
        pushd build/test/${{ env.BUILD_TYPE }}
        ./CBL_C_Tests.exe -r list
        popd
