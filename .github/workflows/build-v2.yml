name: Build and Test for ARMHF

on:
  push:
    branches:
      - master
      - dev
      - 'release/*'
  pull_request:
    branches:
      - '**'

env:
  BUILD_TYPE: Debug

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    #### Install Dependencies

    - name: Install ARMHF Cross-Compiler and Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf \
          libicu-dev libicu-dev-armhf-cross zlib1g-dev zlib1g-dev-armhf-cross

    - name: Set Up Cross-Compilation Toolchain
      run: |
        echo "Setting up ARMHF cross-compilation environment"
        mkdir -p $HOME/.cross
        echo 'set(CMAKE_SYSTEM_NAME Linux)' >> $HOME/.cross/toolchain.cmake
        echo 'set(CMAKE_SYSTEM_PROCESSOR arm)' >> $HOME/.cross/toolchain.cmake
        echo 'set(CMAKE_C_COMPILER /usr/bin/arm-linux-gnueabihf-gcc)' >> $HOME/.cross/toolchain.cmake
        echo 'set(CMAKE_CXX_COMPILER /usr/bin/arm-linux-gnueabihf-g++)' >> $HOME/.cross/toolchain.cmake
        echo 'set(CMAKE_SYSROOT /usr/arm-linux-gnueabihf)' >> $HOME/.cross/toolchain.cmake
        echo 'set(CMAKE_FIND_ROOT_PATH /usr/arm-linux-gnueabihf)' >> $HOME/.cross/toolchain.cmake
        echo 'set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)' >> $HOME/.cross/toolchain.cmake
        echo 'set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)' >> $HOME/.cross/toolchain.cmake
        echo 'set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)' >> $HOME/.cross/toolchain.cmake

    #### BUILD

    - name: Create Build Directory
      run: |
        mkdir -p $GITHUB_WORKSPACE/build

    - name: Configure CMake for ARMHF
      run: |
        cmake .. -DCMAKE_TOOLCHAIN_FILE=$HOME/.cross/toolchain.cmake -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/build/out

    - name: Build Project
      run: |
        cmake --build . --config $BUILD_TYPE