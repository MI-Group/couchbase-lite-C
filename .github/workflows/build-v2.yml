name: Build ARM32

on:
  push:
    branches:
      - master
      - dev
      - 'release/*'
  pull_request:
    branches:
      - '**'
  workflow_dispatch:

env:
  BUILD_TYPE: Debug
  
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the code
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      # Step 2: Install dependencies
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libicu-dev build-essential gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf cmake zlib1g-dev ninja-build libicu-dev

      # Step 3: Verify toolchain file
      - name: Verify Toolchain File
        run: |
          if [ ! -f "${{github.workspace}}/cmake/Toolchain-cross-armhf.cmake" ]; then
            echo "Toolchain file not found: ${{github.workspace}}/cmake/Toolchain-cross-armhf.cmake"
            exit 1
          fi

      # Step 4: Create Build Directory
      - name: Create Build Directory
        run: cmake -E make_directory ${{github.workspace}}/build

      # Step 5: Configure CMake
      - name: Configure CMake for ARM32
        working-directory: ${{github.workspace}}/build
        run: |
          export ROOTFS=${{env.ROOTFS}}
          cmake .. \
            -DCMAKE_TOOLCHAIN_FILE=${{github.workspace}}/cmake/Toolchain-cross-armhf.cmake \
            -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
            -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/build/out
           

      # Step 6: Build
      - name: Build Project
        working-directory: ${{github.workspace}}/build
        run: cmake --build . --config ${{env.BUILD_TYPE}}

      # Step 7: Upload Build Artifacts
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: build-artifact-arm32
          path: ${{github.workspace}}/build
